import { AI } from 'ai-functions'
import { promises as fs } from 'fs'
import path from 'path'
import { OpenAI } from 'openai'

async function createMDXFile(name: string, mdxPath: string): Promise<void> {
  const mdx = `---
name: ${name}
description: AI function that handles ${name} operation
input:
  type: object
  properties: {}
output:
  type: object
  properties: {}
---

# ${name}

This function is auto-generated by the AI Workflow system.

## Input Schema
\`\`\`typescript
interface Input {
  // TODO: Define input properties
}
\`\`\`

## Output Schema
\`\`\`typescript
interface Output {
  // TODO: Define output properties
}
\`\`\`

## Example Usage
\`\`\`typescript
const result = await ai.${name}({ /* input */ })
\`\`\`
`
  await fs.mkdir(path.dirname(mdxPath), { recursive: true })
  await fs.writeFile(mdxPath, mdx)
}

export function createAIProxy(config: { openai?: OpenAI } = {}) {
  const { ai: baseAi, gpt, list, openai } = AI(config)

  const aiProxy = new Proxy(baseAi, {
    get(target: any, prop: string) {
      if (prop in target) return target[prop]

      return async function(...args: any[]) {
        const mdxPath = path.join(process.cwd(), 'functions', `${prop}.mdx`)

        try {
          await fs.access(mdxPath)
        } catch {
          await createMDXFile(prop, mdxPath)
        }

        return target[prop](...args)
      }
    }
  })

  return {
    ai: aiProxy,
    gpt,
    list,
    openai
  }
}

export const { ai, gpt, list } = createAIProxy({
  openai: new OpenAI({ apiKey: process.env.OPENAI_API_KEY })
})
