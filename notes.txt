# Investigation Notes for ai-workflows MDX Implementation

## Current Project State
1. Dependencies
   - mdxld: ^0.1.1 - For MDX parsing and processing
   - gray-matter: ^4.0.3 - For frontmatter parsing
   - zod: ^3.24.1 - For schema validation
   - ai-functions: ^0.2.19 - For AI function support
   - @ai-sdk/openai: ^1.0.8 - For OpenAI integration

2. Project Structure
   - src/
     - index.ts
     - index.test.ts
   - Minimal implementation currently exists
   - ESM package (type: "module")

3. Required Features from TODO.md
   - Proxy wrapper for ai object method calls
   - MDX file lookup in ai/ folder
   - Front matter requirements:
     - model
     - system
   - Output schema with Zod enum support
   - TypeScript .d.ts generation from MDX schemas

4. MDX-LD Integration Requirements
   - JSON-LD and YAML-LD foundations
   - Support for:
     - Structured data
     - Unstructured content
     - Executable code
     - UI components

5. Testing Setup
   - Jest configured for ESM
   - Test files in src/ directory
   - CI checks passing on main branch

## Implementation Investigation
1. Current Implementation
   - Examining src/index.ts and src/index.test.ts
   - No existing MDX files found
   - Need to implement Proxy wrapper from scratch

2. MDX Processing Requirements
   - Need to parse front matter with gray-matter
   - Must validate required fields (model, system)
   - Must generate Zod schemas from output types
   - Must handle | in type definitions as enums

3. Type Generation Requirements
   - Need to generate .d.ts files from MDX schemas
   - Must support dynamic method discovery
   - Must provide type safety for ai object methods

4. Questions to Resolve
   - Error handling for missing MDX files
   - Caching strategy for parsed MDX
   - Type generation timing (build vs runtime)
   - Testing strategy for MDX-based functions
